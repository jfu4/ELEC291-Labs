0000              1   ;--------------------------------------------------------
0000              2   ; File Created by C51
0000              3   ; Version 1.0.0 #1170 (Feb 16 2022) (MSVC)
0000              4   ; This file was generated Wed Mar 08 15:09:52 2023
0000              5   ;--------------------------------------------------------
                  5   $name EFM8_ADC
                  6   $optc51 --model-small
                  7   $printf_float
0000              9            R_DSEG    segment data
0000             10            R_CSEG    segment code
0000             11            R_BSEG    segment bit
0000             12            R_XSEG    segment xdata
0000             13            R_PSEG    segment xdata
0000             14            R_ISEG    segment idata
0000             15            R_OSEG    segment data overlay
0000             16            BIT_BANK  segment data overlay
0000             17            R_HOME    segment code
0000             18            R_GSINIT  segment code
0000             19            R_IXSEG   segment xdata
0000             20            R_CONST   segment code
0000             21            R_XINIT   segment code
0000             22            R_DINIT   segment code
0000             23   
0000             24   ;--------------------------------------------------------
0000             25   ; Public variables in this module
0000             26   ;--------------------------------------------------------
0000             27            public _InitPinADC_PARM_2
0000             28            public _main
0000             29            public _TIMER0_Init
0000             30            public _Get_ADC
0000             31            public _Volts_at_Pin
0000             32            public _ADC_at_Pin
0000             33            public _InitPinADC
0000             34            public _waitms
0000             35            public _Timer3us
0000             36            public _InitADC
0000             37            public __c51_external_startup
0000             38            public _overflow_count
0000             39   ;--------------------------------------------------------
0000             40   ; Special Function Registers
0000             41   ;--------------------------------------------------------
0000             42   _ACC            DATA 0xe0
0000             43   _ADC0ASAH       DATA 0xb6
0000             44   _ADC0ASAL       DATA 0xb5
0000             45   _ADC0ASCF       DATA 0xa1
0000             46   _ADC0ASCT       DATA 0xc7
0000             47   _ADC0CF0        DATA 0xbc
0000             48   _ADC0CF1        DATA 0xb9
0000             49   _ADC0CF2        DATA 0xdf
0000             50   _ADC0CN0        DATA 0xe8
0000             51   _ADC0CN1        DATA 0xb2
0000             52   _ADC0CN2        DATA 0xb3
0000             53   _ADC0GTH        DATA 0xc4
0000             54   _ADC0GTL        DATA 0xc3
0000             55   _ADC0H          DATA 0xbe
0000             56   _ADC0L          DATA 0xbd
0000             57   _ADC0LTH        DATA 0xc6
0000             58   _ADC0LTL        DATA 0xc5
0000             59   _ADC0MX         DATA 0xbb
0000             60   _B              DATA 0xf0
0000             61   _CKCON0         DATA 0x8e
0000             62   _CKCON1         DATA 0xa6
0000             63   _CLEN0          DATA 0xc6
0000             64   _CLIE0          DATA 0xc7
0000             65   _CLIF0          DATA 0xe8
0000             66   _CLKSEL         DATA 0xa9
0000             67   _CLOUT0         DATA 0xd1
0000             68   _CLU0CF         DATA 0xb1
0000             69   _CLU0FN         DATA 0xaf
0000             70   _CLU0MX         DATA 0x84
0000             71   _CLU1CF         DATA 0xb3
0000             72   _CLU1FN         DATA 0xb2
0000             73   _CLU1MX         DATA 0x85
0000             74   _CLU2CF         DATA 0xb6
0000             75   _CLU2FN         DATA 0xb5
0000             76   _CLU2MX         DATA 0x91
0000             77   _CLU3CF         DATA 0xbf
0000             78   _CLU3FN         DATA 0xbe
0000             79   _CLU3MX         DATA 0xae
0000             80   _CMP0CN0        DATA 0x9b
0000             81   _CMP0CN1        DATA 0x99
0000             82   _CMP0MD         DATA 0x9d
0000             83   _CMP0MX         DATA 0x9f
0000             84   _CMP1CN0        DATA 0xbf
0000             85   _CMP1CN1        DATA 0xac
0000             86   _CMP1MD         DATA 0xab
0000             87   _CMP1MX         DATA 0xaa
0000             88   _CRC0CN0        DATA 0xce
0000             89   _CRC0CN1        DATA 0x86
0000             90   _CRC0CNT        DATA 0xd3
0000             91   _CRC0DAT        DATA 0xcb
0000             92   _CRC0FLIP       DATA 0xcf
0000             93   _CRC0IN         DATA 0xca
0000             94   _CRC0ST         DATA 0xd2
0000             95   _DAC0CF0        DATA 0x91
0000             96   _DAC0CF1        DATA 0x92
0000             97   _DAC0H          DATA 0x85
0000             98   _DAC0L          DATA 0x84
0000             99   _DAC1CF0        DATA 0x93
0000            100   _DAC1CF1        DATA 0x94
0000            101   _DAC1H          DATA 0x8a
0000            102   _DAC1L          DATA 0x89
0000            103   _DAC2CF0        DATA 0x95
0000            104   _DAC2CF1        DATA 0x96
0000            105   _DAC2H          DATA 0x8c
0000            106   _DAC2L          DATA 0x8b
0000            107   _DAC3CF0        DATA 0x9a
0000            108   _DAC3CF1        DATA 0x9c
0000            109   _DAC3H          DATA 0x8e
0000            110   _DAC3L          DATA 0x8d
0000            111   _DACGCF0        DATA 0x88
0000            112   _DACGCF1        DATA 0x98
0000            113   _DACGCF2        DATA 0xa2
0000            114   _DERIVID        DATA 0xad
0000            115   _DEVICEID       DATA 0xb5
0000            116   _DPH            DATA 0x83
0000            117   _DPL            DATA 0x82
0000            118   _EIE1           DATA 0xe6
0000            119   _EIE2           DATA 0xf3
0000            120   _EIP1           DATA 0xbb
0000            121   _EIP1H          DATA 0xee
0000            122   _EIP2           DATA 0xed
0000            123   _EIP2H          DATA 0xf6
0000            124   _EMI0CN         DATA 0xe7
0000            125   _FLKEY          DATA 0xb7
0000            126   _HFO0CAL        DATA 0xc7
0000            127   _HFO1CAL        DATA 0xd6
0000            128   _HFOCN          DATA 0xef
0000            129   _I2C0ADM        DATA 0xff
0000            130   _I2C0CN0        DATA 0xba
0000            131   _I2C0DIN        DATA 0xbc
0000            132   _I2C0DOUT       DATA 0xbb
0000            133   _I2C0FCN0       DATA 0xad
0000            134   _I2C0FCN1       DATA 0xab
0000            135   _I2C0FCT        DATA 0xf5
0000            136   _I2C0SLAD       DATA 0xbd
0000            137   _I2C0STAT       DATA 0xb9
0000            138   _IE             DATA 0xa8
0000            139   _IP             DATA 0xb8
0000            140   _IPH            DATA 0xf2
0000            141   _IT01CF         DATA 0xe4
0000            142   _LFO0CN         DATA 0xb1
0000            143   _P0             DATA 0x80
0000            144   _P0MASK         DATA 0xfe
0000            145   _P0MAT          DATA 0xfd
0000            146   _P0MDIN         DATA 0xf1
0000            147   _P0MDOUT        DATA 0xa4
0000            148   _P0SKIP         DATA 0xd4
0000            149   _P1             DATA 0x90
0000            150   _P1MASK         DATA 0xee
0000            151   _P1MAT          DATA 0xed
0000            152   _P1MDIN         DATA 0xf2
0000            153   _P1MDOUT        DATA 0xa5
0000            154   _P1SKIP         DATA 0xd5
0000            155   _P2             DATA 0xa0
0000            156   _P2MASK         DATA 0xfc
0000            157   _P2MAT          DATA 0xfb
0000            158   _P2MDIN         DATA 0xf3
0000            159   _P2MDOUT        DATA 0xa6
0000            160   _P2SKIP         DATA 0xcc
0000            161   _P3             DATA 0xb0
0000            162   _P3MDIN         DATA 0xf4
0000            163   _P3MDOUT        DATA 0x9c
0000            164   _PCA0CENT       DATA 0x9e
0000            165   _PCA0CLR        DATA 0x9c
0000            166   _PCA0CN0        DATA 0xd8
0000            167   _PCA0CPH0       DATA 0xfc
0000            168   _PCA0CPH1       DATA 0xea
0000            169   _PCA0CPH2       DATA 0xec
0000            170   _PCA0CPH3       DATA 0xf5
0000            171   _PCA0CPH4       DATA 0x85
0000            172   _PCA0CPH5       DATA 0xde
0000            173   _PCA0CPL0       DATA 0xfb
0000            174   _PCA0CPL1       DATA 0xe9
0000            175   _PCA0CPL2       DATA 0xeb
0000            176   _PCA0CPL3       DATA 0xf4
0000            177   _PCA0CPL4       DATA 0x84
0000            178   _PCA0CPL5       DATA 0xdd
0000            179   _PCA0CPM0       DATA 0xda
0000            180   _PCA0CPM1       DATA 0xdb
0000            181   _PCA0CPM2       DATA 0xdc
0000            182   _PCA0CPM3       DATA 0xae
0000            183   _PCA0CPM4       DATA 0xaf
0000            184   _PCA0CPM5       DATA 0xcc
0000            185   _PCA0H          DATA 0xfa
0000            186   _PCA0L          DATA 0xf9
0000            187   _PCA0MD         DATA 0xd9
0000            188   _PCA0POL        DATA 0x96
0000            189   _PCA0PWM        DATA 0xf7
0000            190   _PCON0          DATA 0x87
0000            191   _PCON1          DATA 0xcd
0000            192   _PFE0CN         DATA 0xc1
0000            193   _PRTDRV         DATA 0xf6
0000            194   _PSCTL          DATA 0x8f
0000            195   _PSTAT0         DATA 0xaa
0000            196   _PSW            DATA 0xd0
0000            197   _REF0CN         DATA 0xd1
0000            198   _REG0CN         DATA 0xc9
0000            199   _REVID          DATA 0xb6
0000            200   _RSTSRC         DATA 0xef
0000            201   _SBCON1         DATA 0x94
0000            202   _SBRLH1         DATA 0x96
0000            203   _SBRLL1         DATA 0x95
0000            204   _SBUF           DATA 0x99
0000            205   _SBUF0          DATA 0x99
0000            206   _SBUF1          DATA 0x92
0000            207   _SCON           DATA 0x98
0000            208   _SCON0          DATA 0x98
0000            209   _SCON1          DATA 0xc8
0000            210   _SFRPAGE        DATA 0xa7
0000            211   _SFRPGCN        DATA 0xbc
0000            212   _SFRSTACK       DATA 0xd7
0000            213   _SMB0ADM        DATA 0xd6
0000            214   _SMB0ADR        DATA 0xd7
0000            215   _SMB0CF         DATA 0xc1
0000            216   _SMB0CN0        DATA 0xc0
0000            217   _SMB0DAT        DATA 0xc2
0000            218   _SMB0FCN0       DATA 0xc3
0000            219   _SMB0FCN1       DATA 0xc4
0000            220   _SMB0FCT        DATA 0xef
0000            221   _SMB0RXLN       DATA 0xc5
0000            222   _SMB0TC         DATA 0xac
0000            223   _SMOD1          DATA 0x93
0000            224   _SP             DATA 0x81
0000            225   _SPI0CFG        DATA 0xa1
0000            226   _SPI0CKR        DATA 0xa2
0000            227   _SPI0CN0        DATA 0xf8
0000            228   _SPI0DAT        DATA 0xa3
0000            229   _SPI0FCN0       DATA 0x9a
0000            230   _SPI0FCN1       DATA 0x9b
0000            231   _SPI0FCT        DATA 0xf7
0000            232   _SPI0PCF        DATA 0xdf
0000            233   _TCON           DATA 0x88
0000            234   _TH0            DATA 0x8c
0000            235   _TH1            DATA 0x8d
0000            236   _TL0            DATA 0x8a
0000            237   _TL1            DATA 0x8b
0000            238   _TMOD           DATA 0x89
0000            239   _TMR2CN0        DATA 0xc8
0000            240   _TMR2CN1        DATA 0xfd
0000            241   _TMR2H          DATA 0xcf
0000            242   _TMR2L          DATA 0xce
0000            243   _TMR2RLH        DATA 0xcb
0000            244   _TMR2RLL        DATA 0xca
0000            245   _TMR3CN0        DATA 0x91
0000            246   _TMR3CN1        DATA 0xfe
0000            247   _TMR3H          DATA 0x95
0000            248   _TMR3L          DATA 0x94
0000            249   _TMR3RLH        DATA 0x93
0000            250   _TMR3RLL        DATA 0x92
0000            251   _TMR4CN0        DATA 0x98
0000            252   _TMR4CN1        DATA 0xff
0000            253   _TMR4H          DATA 0xa5
0000            254   _TMR4L          DATA 0xa4
0000            255   _TMR4RLH        DATA 0xa3
0000            256   _TMR4RLL        DATA 0xa2
0000            257   _TMR5CN0        DATA 0xc0
0000            258   _TMR5CN1        DATA 0xf1
0000            259   _TMR5H          DATA 0xd5
0000            260   _TMR5L          DATA 0xd4
0000            261   _TMR5RLH        DATA 0xd3
0000            262   _TMR5RLL        DATA 0xd2
0000            263   _UART0PCF       DATA 0xd9
0000            264   _UART1FCN0      DATA 0x9d
0000            265   _UART1FCN1      DATA 0xd8
0000            266   _UART1FCT       DATA 0xfa
0000            267   _UART1LIN       DATA 0x9e
0000            268   _UART1PCF       DATA 0xda
0000            269   _VDM0CN         DATA 0xff
0000            270   _WDTCN          DATA 0x97
0000            271   _XBR0           DATA 0xe1
0000            272   _XBR1           DATA 0xe2
0000            273   _XBR2           DATA 0xe3
0000            274   _XOSC0CN        DATA 0x86
0000            275   _DPTR           DATA 0x8382
0000            276   _TMR2RL         DATA 0xcbca
0000            277   _TMR3RL         DATA 0x9392
0000            278   _TMR4RL         DATA 0xa3a2
0000            279   _TMR5RL         DATA 0xd3d2
0000            280   _TMR0           DATA 0x8c8a
0000            281   _TMR1           DATA 0x8d8b
0000            282   _TMR2           DATA 0xcfce
0000            283   _TMR3           DATA 0x9594
0000            284   _TMR4           DATA 0xa5a4
0000            285   _TMR5           DATA 0xd5d4
0000            286   _SBRL1          DATA 0x9695
0000            287   _PCA0           DATA 0xfaf9
0000            288   _PCA0CP0        DATA 0xfcfb
0000            289   _PCA0CP1        DATA 0xeae9
0000            290   _PCA0CP2        DATA 0xeceb
0000            291   _PCA0CP3        DATA 0xf5f4
0000            292   _PCA0CP4        DATA 0x8584
0000            293   _PCA0CP5        DATA 0xdedd
0000            294   _ADC0ASA        DATA 0xb6b5
0000            295   _ADC0GT         DATA 0xc4c3
0000            296   _ADC0           DATA 0xbebd
0000            297   _ADC0LT         DATA 0xc6c5
0000            298   _DAC0           DATA 0x8584
0000            299   _DAC1           DATA 0x8a89
0000            300   _DAC2           DATA 0x8c8b
0000            301   _DAC3           DATA 0x8e8d
0000            302   ;--------------------------------------------------------
0000            303   ; special function bits
0000            304   ;--------------------------------------------------------
0000            305   _ACC_0          BIT 0xe0
0000            306   _ACC_1          BIT 0xe1
0000            307   _ACC_2          BIT 0xe2
0000            308   _ACC_3          BIT 0xe3
0000            309   _ACC_4          BIT 0xe4
0000            310   _ACC_5          BIT 0xe5
0000            311   _ACC_6          BIT 0xe6
0000            312   _ACC_7          BIT 0xe7
0000            313   _TEMPE          BIT 0xe8
0000            314   _ADGN0          BIT 0xe9
0000            315   _ADGN1          BIT 0xea
0000            316   _ADWINT         BIT 0xeb
0000            317   _ADBUSY         BIT 0xec
0000            318   _ADINT          BIT 0xed
0000            319   _IPOEN          BIT 0xee
0000            320   _ADEN           BIT 0xef
0000            321   _B_0            BIT 0xf0
0000            322   _B_1            BIT 0xf1
0000            323   _B_2            BIT 0xf2
0000            324   _B_3            BIT 0xf3
0000            325   _B_4            BIT 0xf4
0000            326   _B_5            BIT 0xf5
0000            327   _B_6            BIT 0xf6
0000            328   _B_7            BIT 0xf7
0000            329   _C0FIF          BIT 0xe8
0000            330   _C0RIF          BIT 0xe9
0000            331   _C1FIF          BIT 0xea
0000            332   _C1RIF          BIT 0xeb
0000            333   _C2FIF          BIT 0xec
0000            334   _C2RIF          BIT 0xed
0000            335   _C3FIF          BIT 0xee
0000            336   _C3RIF          BIT 0xef
0000            337   _D1SRC0         BIT 0x88
0000            338   _D1SRC1         BIT 0x89
0000            339   _D1AMEN         BIT 0x8a
0000            340   _D01REFSL       BIT 0x8b
0000            341   _D3SRC0         BIT 0x8c
0000            342   _D3SRC1         BIT 0x8d
0000            343   _D3AMEN         BIT 0x8e
0000            344   _D23REFSL       BIT 0x8f
0000            345   _D0UDIS         BIT 0x98
0000            346   _D1UDIS         BIT 0x99
0000            347   _D2UDIS         BIT 0x9a
0000            348   _D3UDIS         BIT 0x9b
0000            349   _EX0            BIT 0xa8
0000            350   _ET0            BIT 0xa9
0000            351   _EX1            BIT 0xaa
0000            352   _ET1            BIT 0xab
0000            353   _ES0            BIT 0xac
0000            354   _ET2            BIT 0xad
0000            355   _ESPI0          BIT 0xae
0000            356   _EA             BIT 0xaf
0000            357   _PX0            BIT 0xb8
0000            358   _PT0            BIT 0xb9
0000            359   _PX1            BIT 0xba
0000            360   _PT1            BIT 0xbb
0000            361   _PS0            BIT 0xbc
0000            362   _PT2            BIT 0xbd
0000            363   _PSPI0          BIT 0xbe
0000            364   _P0_0           BIT 0x80
0000            365   _P0_1           BIT 0x81
0000            366   _P0_2           BIT 0x82
0000            367   _P0_3           BIT 0x83
0000            368   _P0_4           BIT 0x84
0000            369   _P0_5           BIT 0x85
0000            370   _P0_6           BIT 0x86
0000            371   _P0_7           BIT 0x87
0000            372   _P1_0           BIT 0x90
0000            373   _P1_1           BIT 0x91
0000            374   _P1_2           BIT 0x92
0000            375   _P1_3           BIT 0x93
0000            376   _P1_4           BIT 0x94
0000            377   _P1_5           BIT 0x95
0000            378   _P1_6           BIT 0x96
0000            379   _P1_7           BIT 0x97
0000            380   _P2_0           BIT 0xa0
0000            381   _P2_1           BIT 0xa1
0000            382   _P2_2           BIT 0xa2
0000            383   _P2_3           BIT 0xa3
0000            384   _P2_4           BIT 0xa4
0000            385   _P2_5           BIT 0xa5
0000            386   _P2_6           BIT 0xa6
0000            387   _P3_0           BIT 0xb0
0000            388   _P3_1           BIT 0xb1
0000            389   _P3_2           BIT 0xb2
0000            390   _P3_3           BIT 0xb3
0000            391   _P3_4           BIT 0xb4
0000            392   _P3_7           BIT 0xb7
0000            393   _CCF0           BIT 0xd8
0000            394   _CCF1           BIT 0xd9
0000            395   _CCF2           BIT 0xda
0000            396   _CCF3           BIT 0xdb
0000            397   _CCF4           BIT 0xdc
0000            398   _CCF5           BIT 0xdd
0000            399   _CR             BIT 0xde
0000            400   _CF             BIT 0xdf
0000            401   _PARITY         BIT 0xd0
0000            402   _F1             BIT 0xd1
0000            403   _OV             BIT 0xd2
0000            404   _RS0            BIT 0xd3
0000            405   _RS1            BIT 0xd4
0000            406   _F0             BIT 0xd5
0000            407   _AC             BIT 0xd6
0000            408   _CY             BIT 0xd7
0000            409   _RI             BIT 0x98
0000            410   _TI             BIT 0x99
0000            411   _RB8            BIT 0x9a
0000            412   _TB8            BIT 0x9b
0000            413   _REN            BIT 0x9c
0000            414   _CE             BIT 0x9d
0000            415   _SMODE          BIT 0x9e
0000            416   _RI1            BIT 0xc8
0000            417   _TI1            BIT 0xc9
0000            418   _RBX1           BIT 0xca
0000            419   _TBX1           BIT 0xcb
0000            420   _REN1           BIT 0xcc
0000            421   _PERR1          BIT 0xcd
0000            422   _OVR1           BIT 0xce
0000            423   _SI             BIT 0xc0
0000            424   _ACK            BIT 0xc1
0000            425   _ARBLOST        BIT 0xc2
0000            426   _ACKRQ          BIT 0xc3
0000            427   _STO            BIT 0xc4
0000            428   _STA            BIT 0xc5
0000            429   _TXMODE         BIT 0xc6
0000            430   _MASTER         BIT 0xc7
0000            431   _SPIEN          BIT 0xf8
0000            432   _TXNF           BIT 0xf9
0000            433   _NSSMD0         BIT 0xfa
0000            434   _NSSMD1         BIT 0xfb
0000            435   _RXOVRN         BIT 0xfc
0000            436   _MODF           BIT 0xfd
0000            437   _WCOL           BIT 0xfe
0000            438   _SPIF           BIT 0xff
0000            439   _IT0            BIT 0x88
0000            440   _IE0            BIT 0x89
0000            441   _IT1            BIT 0x8a
0000            442   _IE1            BIT 0x8b
0000            443   _TR0            BIT 0x8c
0000            444   _TF0            BIT 0x8d
0000            445   _TR1            BIT 0x8e
0000            446   _TF1            BIT 0x8f
0000            447   _T2XCLK0        BIT 0xc8
0000            448   _T2XCLK1        BIT 0xc9
0000            449   _TR2            BIT 0xca
0000            450   _T2SPLIT        BIT 0xcb
0000            451   _TF2CEN         BIT 0xcc
0000            452   _TF2LEN         BIT 0xcd
0000            453   _TF2L           BIT 0xce
0000            454   _TF2H           BIT 0xcf
0000            455   _T4XCLK0        BIT 0x98
0000            456   _T4XCLK1        BIT 0x99
0000            457   _TR4            BIT 0x9a
0000            458   _T4SPLIT        BIT 0x9b
0000            459   _TF4CEN         BIT 0x9c
0000            460   _TF4LEN         BIT 0x9d
0000            461   _TF4L           BIT 0x9e
0000            462   _TF4H           BIT 0x9f
0000            463   _T5XCLK0        BIT 0xc0
0000            464   _T5XCLK1        BIT 0xc1
0000            465   _TR5            BIT 0xc2
0000            466   _T5SPLIT        BIT 0xc3
0000            467   _TF5CEN         BIT 0xc4
0000            468   _TF5LEN         BIT 0xc5
0000            469   _TF5L           BIT 0xc6
0000            470   _TF5H           BIT 0xc7
0000            471   _RIE            BIT 0xd8
0000            472   _RXTO0          BIT 0xd9
0000            473   _RXTO1          BIT 0xda
0000            474   _RFRQ           BIT 0xdb
0000            475   _TIE            BIT 0xdc
0000            476   _TXHOLD         BIT 0xdd
0000            477   _TXNF1          BIT 0xde
0000            478   _TFRQ           BIT 0xdf
0000            479   ;--------------------------------------------------------
0000            480   ; overlayable register banks
0000            481   ;--------------------------------------------------------
0000            482            rbank0 segment data overlay
0000            483   ;--------------------------------------------------------
0000            484   ; internal ram data
0000            485   ;--------------------------------------------------------
0000            486            rseg R_DSEG
0000            487   _overflow_count:
0000            488            ds 1
0001            489   _main_vrms1_1_63:
0001            490            ds 4
0005            491   _main_vrms2_1_63:
0005            492            ds 4
0009            493   _main_half_period_ref_1_63:
0009            494            ds 4
000D            495   _main_phasediff_1_63:
000D            496            ds 4
0011            497   _main_done_1_63:
0011            498            ds 2
0013            499   _main_sloc0_1_0:
0013            500            ds 4
0017            501   _main_sloc1_1_0:
0017            502            ds 4
001B            503   ;--------------------------------------------------------
001B            504   ; overlayable items in internal ram 
001B            505   ;--------------------------------------------------------
0000            506            rseg    R_OSEG
0000            507            rseg    R_OSEG
0000            508   _InitPinADC_PARM_2:
0000            509            ds 1
0001            510            rseg    R_OSEG
0001            511   ;--------------------------------------------------------
0001            512   ; indirectly addressable internal ram data
0001            513   ;--------------------------------------------------------
0000            514            rseg R_ISEG
0000            515   ;--------------------------------------------------------
0000            516   ; absolute internal ram data
0000            517   ;--------------------------------------------------------
0000            518            DSEG
0000            519   ;--------------------------------------------------------
0000            520   ; bit data
0000            521   ;--------------------------------------------------------
0000            522            rseg R_BSEG
0000            523   ;--------------------------------------------------------
0000            524   ; paged external ram data
0000            525   ;--------------------------------------------------------
0000            526            rseg R_PSEG
0000            527   ;--------------------------------------------------------
0000            528   ; external ram data
0000            529   ;--------------------------------------------------------
0000            530            rseg R_XSEG
0000            531   ;--------------------------------------------------------
0000            532   ; absolute external ram data
0000            533   ;--------------------------------------------------------
0000            534            XSEG
0000            535   ;--------------------------------------------------------
0000            536   ; external initialized ram data
0000            537   ;--------------------------------------------------------
0000            538            rseg R_IXSEG
0000            539            rseg R_HOME
0000            540            rseg R_GSINIT
0000            541            rseg R_CSEG
0000            542   ;--------------------------------------------------------
0000            543   ; Reset entry point and interrupt vectors
0000            544   ;--------------------------------------------------------
0000            545            CSEG at 0x0000
0000 020000     546            ljmp    _crt0
0003            547   ;--------------------------------------------------------
0003            548   ; global & static initialisations
0003            549   ;--------------------------------------------------------
0000            550            rseg R_HOME
0000            551            rseg R_GSINIT
0000            552            rseg R_GSINIT
0000            553   ;--------------------------------------------------------
0000            554   ; data variables initialization
0000            555   ;--------------------------------------------------------
0000            556            rseg R_DINIT
0000            557            ; The linker places a 'ret' at the end of segment R_DINIT.
0000            558   ;--------------------------------------------------------
0000            559   ; code
0000            560   ;--------------------------------------------------------
0000            561            rseg R_CSEG
0000            562   ;------------------------------------------------------------
0000            563   ;Allocation info for local variables in function '_c51_external_startup'
0000            564   ;------------------------------------------------------------
0000            565   ;------------------------------------------------------------
0000            566   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:20: char _c51_external_startup (void)
0000            567   ;        -----------------------------------------
0000            568   ;         function _c51_external_startup
0000            569   ;        -----------------------------------------
0000            570   __c51_external_startup:
0000            571            using   0
0000            572   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:23: SFRPAGE = 0x00;
0000 75A700     573            mov     _SFRPAGE,#0x00
0003            574   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:24: WDTCN = 0xDE; //First key
0003 7597DE     575            mov     _WDTCN,#0xDE
0006            576   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:25: WDTCN = 0xAD; //Second key
0006 7597AD     577            mov     _WDTCN,#0xAD
0009            578   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:27: VDM0CN=0x80;       // enable VDD monitor
0009 75FF80     579            mov     _VDM0CN,#0x80
000C            580   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:28: RSTSRC=0x02|0x04;  // Enable reset on missing clock detector and VDD
000C 75EF06     581            mov     _RSTSRC,#0x06
000F            582   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:35: SFRPAGE = 0x10;
000F 75A710     583            mov     _SFRPAGE,#0x10
0012            584   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:36: PFE0CN  = 0x20; // SYSCLK < 75 MHz.
0012 75C120     585            mov     _PFE0CN,#0x20
0015            586   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:37: SFRPAGE = 0x00;
0015 75A700     587            mov     _SFRPAGE,#0x00
0018            588   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:58: CLKSEL = 0x00;
0018 75A900     589            mov     _CLKSEL,#0x00
001B            590   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:59: CLKSEL = 0x00;
001B 75A900     591            mov     _CLKSEL,#0x00
001E            592   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:60: while ((CLKSEL & 0x80) == 0);
001E            593   L002001?:
001E E5A9       594            mov     a,_CLKSEL
0020 30E780     595            jnb     acc.7,L002001?
0023            596   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:61: CLKSEL = 0x03;
0023 75A903     597            mov     _CLKSEL,#0x03
0026            598   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:62: CLKSEL = 0x03;
0026 75A903     599            mov     _CLKSEL,#0x03
0029            600   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:63: while ((CLKSEL & 0x80) == 0);
0029            601   L002004?:
0029 E5A9       602            mov     a,_CLKSEL
002B 30E700     603            jnb     acc.7,L002004?
002E            604   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:68: P0MDOUT |= 0x10; // Enable UART0 TX as push-pull output
002E 43A410     605            orl     _P0MDOUT,#0x10
0031            606   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:69: XBR0     = 0x01; // Enable UART0 on P0.4(TX) and P0.5(RX)                     
0031 75E101     607            mov     _XBR0,#0x01
0034            608   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:70: XBR1     = 0X00;
0034 75E200     609            mov     _XBR1,#0x00
0037            610   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:71: XBR2     = 0x40; // Enable crossbar and weak pull-ups
0037 75E340     611            mov     _XBR2,#0x40
003A            612   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:77: SCON0 = 0x10;
003A 759810     613            mov     _SCON0,#0x10
003D            614   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:78: TH1 = 0x100-((SYSCLK/BAUDRATE)/(2L*12L));
003D 758DE6     615            mov     _TH1,#0xE6
0040            616   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:79: TL1 = TH1;      // Init Timer1
0040 858D8B     617            mov     _TL1,_TH1
0043            618   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:80: TMOD &= ~0xf0;  // TMOD: timer 1 in 8-bit auto-reload
0043 53890F     619            anl     _TMOD,#0x0F
0046            620   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:81: TMOD |=  0x20;                       
0046 438920     621            orl     _TMOD,#0x20
0049            622   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:82: TR1 = 1; // START Timer1
0049 D28E       623            setb    _TR1
004B            624   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:83: TI = 1;  // Indicate TX0 ready
004B D299       625            setb    _TI
004D            626   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:85: return 0;
004D 758200     627            mov     dpl,#0x00
0050 22         628            ret
0051            629   ;------------------------------------------------------------
0051            630   ;Allocation info for local variables in function 'InitADC'
0051            631   ;------------------------------------------------------------
0051            632   ;------------------------------------------------------------
0051            633   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:88: void InitADC (void)
0051            634   ;        -----------------------------------------
0051            635   ;         function InitADC
0051            636   ;        -----------------------------------------
0051            637   _InitADC:
0051            638   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:90: SFRPAGE = 0x00;
0051 75A700     639            mov     _SFRPAGE,#0x00
0054            640   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:91: ADEN=0; // Disable ADC
0054 C2EF       641            clr     _ADEN
0056            642   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:96: (0x0 << 0) ; // Accumulate n conversions: 0x0: 1, 0x1:4, 0x2:8, 0x3:16, 0x4:32
0056 75B280     643            mov     _ADC0CN1,#0x80
0059            644   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:100: (0x0 << 2); // 0:SYSCLK ADCCLK = SYSCLK. 1:HFOSC0 ADCCLK = HFOSC0.
0059 75BC20     645            mov     _ADC0CF0,#0x20
005C            646   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:104: (0x1E << 0); // Conversion Tracking Time. Tadtk = ADTK / (Fsarclk)
005C 75B91E     647            mov     _ADC0CF1,#0x1E
005F            648   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:113: (0x0 << 0) ; // TEMPE. 0: Disable the Temperature Sensor. 1: Enable the Temperature Sensor.
005F 75E800     649            mov     _ADC0CN0,#0x00
0062            650   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:118: (0x1F << 0); // ADPWR. Power Up Delay Time. Tpwrtime = ((4 * (ADPWR + 1)) + 2) / (Fadcclk)
0062 75DF3F     651            mov     _ADC0CF2,#0x3F
0065            652   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:122: (0x0 << 0) ; // ADCM. 0x0: ADBUSY, 0x1: TIMER0, 0x2: TIMER2, 0x3: TIMER3, 0x4: CNVSTR, 0x5: CEX5, 0x6: TIMER4, 0x7: TIMER5, 0x8: CLU0, 0x9: CLU1, 0xA: CLU2, 0xB: CLU3
0065 75B300     653            mov     _ADC0CN2,#0x00
0068            654   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:124: ADEN=1; // Enable ADC
0068 D2EF       655            setb    _ADEN
006A 22         656            ret
006B            657   ;------------------------------------------------------------
006B            658   ;Allocation info for local variables in function 'Timer3us'
006B            659   ;------------------------------------------------------------
006B            660   ;us                        Allocated to registers r2 
006B            661   ;i                         Allocated to registers r3 
006B            662   ;------------------------------------------------------------
006B            663   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:128: void Timer3us(unsigned char us)
006B            664   ;        -----------------------------------------
006B            665   ;         function Timer3us
006B            666   ;        -----------------------------------------
006B            667   _Timer3us:
006B AA82       668            mov     r2,dpl
006D            669   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:133: CKCON0|=0b_0100_0000;
006D 438E40     670            orl     _CKCON0,#0x40
0070            671   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:135: TMR3RL = (-(SYSCLK)/1000000L); // Set Timer3 to overflow in 1us.
0070 7592B8     672            mov     _TMR3RL,#0xB8
0073 7593FF     673            mov     (_TMR3RL >> 8),#0xFF
0076            674   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:136: TMR3 = TMR3RL;                 // Initialize Timer3 for first overflow
0076 859294     675            mov     _TMR3,_TMR3RL
0079 859395     676            mov     (_TMR3 >> 8),(_TMR3RL >> 8)
007C            677   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:138: TMR3CN0 = 0x04;                 // Sart Timer3 and clear overflow flag
007C 759104     678            mov     _TMR3CN0,#0x04
007F            679   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:139: for (i = 0; i < us; i++)       // Count <us> overflows
007F 7B00       680            mov     r3,#0x00
0081            681   L004004?:
0081 C3         682            clr     c
0082 EB         683            mov     a,r3
0083 9A         684            subb    a,r2
0084 5000       685            jnc     L004007?
0086            686   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:141: while (!(TMR3CN0 & 0x80));  // Wait for overflow
0086            687   L004001?:
0086 E591       688            mov     a,_TMR3CN0
0088 30E700     689            jnb     acc.7,L004001?
008B            690   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:142: TMR3CN0 &= ~(0x80);         // Clear overflow indicator
008B 53917F     691            anl     _TMR3CN0,#0x7F
008E            692   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:139: for (i = 0; i < us; i++)       // Count <us> overflows
008E 0B         693            inc     r3
008F 8000       694            sjmp    L004004?
0091            695   L004007?:
0091            696   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:144: TMR3CN0 = 0 ;                   // Stop Timer3 and clear overflow flag
0091 759100     697            mov     _TMR3CN0,#0x00
0094 22         698            ret
0095            699   ;------------------------------------------------------------
0095            700   ;Allocation info for local variables in function 'waitms'
0095            701   ;------------------------------------------------------------
0095            702   ;ms                        Allocated to registers r2 r3 
0095            703   ;j                         Allocated to registers r4 r5 
0095            704   ;k                         Allocated to registers r6 
0095            705   ;------------------------------------------------------------
0095            706   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:147: void waitms (unsigned int ms)
0095            707   ;        -----------------------------------------
0095            708   ;         function waitms
0095            709   ;        -----------------------------------------
0095            710   _waitms:
0095 AA82       711            mov     r2,dpl
0097 AB83       712            mov     r3,dph
0099            713   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:151: for(j=0; j<ms; j++)
0099 7C00       714            mov     r4,#0x00
009B 7D00       715            mov     r5,#0x00
009D            716   L005005?:
009D C3         717            clr     c
009E EC         718            mov     a,r4
009F 9A         719            subb    a,r2
00A0 ED         720            mov     a,r5
00A1 9B         721            subb    a,r3
00A2 5000       722            jnc     L005009?
00A4            723   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:152: for (k=0; k<4; k++) Timer3us(250);
00A4 7E00       724            mov     r6,#0x00
00A6            725   L005001?:
00A6 BE0440     726            cjne    r6,#0x04,L005018?
00A9            727   L005018?:
00A9 5000       728            jnc     L005007?
00AB 7582FA     729            mov     dpl,#0xFA
00AE C002       730            push    ar2
00B0 C003       731            push    ar3
00B2 C004       732            push    ar4
00B4 C005       733            push    ar5
00B6 C006       734            push    ar6
00B8 120000     735            lcall   _Timer3us
00BB D006       736            pop     ar6
00BD D005       737            pop     ar5
00BF D004       738            pop     ar4
00C1 D003       739            pop     ar3
00C3 D002       740            pop     ar2
00C5 0E         741            inc     r6
00C6 8000       742            sjmp    L005001?
00C8            743   L005007?:
00C8            744   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:151: for(j=0; j<ms; j++)
00C8 0C         745            inc     r4
00C9 BC0080     746            cjne    r4,#0x00,L005005?
00CC 0D         747            inc     r5
00CD 8000       748            sjmp    L005005?
00CF            749   L005009?:
00CF 22         750            ret
00D0            751   ;------------------------------------------------------------
00D0            752   ;Allocation info for local variables in function 'InitPinADC'
00D0            753   ;------------------------------------------------------------
00D0            754   ;pinno                     Allocated with name '_InitPinADC_PARM_2'
00D0            755   ;portno                    Allocated to registers r2 
00D0            756   ;mask                      Allocated to registers r3 
00D0            757   ;------------------------------------------------------------
00D0            758   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:157: void InitPinADC (unsigned char portno, unsigned char pinno)
00D0            759   ;        -----------------------------------------
00D0            760   ;         function InitPinADC
00D0            761   ;        -----------------------------------------
00D0            762   _InitPinADC:
00D0 AA82       763            mov     r2,dpl
00D2            764   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:161: mask=1<<pinno;
00D2 8590F0     765            mov     b,_InitPinADC_PARM_2
00D5 05F0       766            inc     b
00D7 7401       767            mov     a,#0x01
00D9 8000       768            sjmp    L006013?
00DB            769   L006011?:
00DB 25E0       770            add     a,acc
00DD            771   L006013?:
00DD D5F040     772            djnz    b,L006011?
00E0 FB         773            mov     r3,a
00E1            774   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:163: SFRPAGE = 0x20;
00E1 75A720     775            mov     _SFRPAGE,#0x20
00E4            776   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:164: switch (portno)
00E4 BA0080     777            cjne    r2,#0x00,L006014?
00E7 8000       778            sjmp    L006001?
00E9            779   L006014?:
00E9 BA0100     780            cjne    r2,#0x01,L006015?
00EC 8000       781            sjmp    L006002?
00EE            782   L006015?:
00EE            783   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:166: case 0:
00EE BA0280     784            cjne    r2,#0x02,L006005?
00F1 8000       785            sjmp    L006003?
00F3            786   L006001?:
00F3            787   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:167: P0MDIN &= (~mask); // Set pin as analog input
00F3 EB         788            mov     a,r3
00F4 F4         789            cpl     a
00F5 FA         790            mov     r2,a
00F6 52F1       791            anl     _P0MDIN,a
00F8            792   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:168: P0SKIP |= mask; // Skip Crossbar decoding for this pin
00F8 EB         793            mov     a,r3
00F9 42D4       794            orl     _P0SKIP,a
00FB            795   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:169: break;
00FB            796   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:170: case 1:
00FB 8000       797            sjmp    L006005?
00FD            798   L006002?:
00FD            799   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:171: P1MDIN &= (~mask); // Set pin as analog input
00FD EB         800            mov     a,r3
00FE F4         801            cpl     a
00FF FA         802            mov     r2,a
0100 52F2       803            anl     _P1MDIN,a
0102            804   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:172: P1SKIP |= mask; // Skip Crossbar decoding for this pin
0102 EB         805            mov     a,r3
0103 42D5       806            orl     _P1SKIP,a
0105            807   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:173: break;
0105            808   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:174: case 2:
0105 8000       809            sjmp    L006005?
0107            810   L006003?:
0107            811   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:175: P2MDIN &= (~mask); // Set pin as analog input
0107 EB         812            mov     a,r3
0108 F4         813            cpl     a
0109 FA         814            mov     r2,a
010A 52F3       815            anl     _P2MDIN,a
010C            816   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:176: P2SKIP |= mask; // Skip Crossbar decoding for this pin
010C EB         817            mov     a,r3
010D 42CC       818            orl     _P2SKIP,a
010F            819   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:180: }
010F            820   L006005?:
010F            821   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:181: SFRPAGE = 0x00;
010F 75A700     822            mov     _SFRPAGE,#0x00
0112 22         823            ret
0113            824   ;------------------------------------------------------------
0113            825   ;Allocation info for local variables in function 'ADC_at_Pin'
0113            826   ;------------------------------------------------------------
0113            827   ;pin                       Allocated to registers 
0113            828   ;------------------------------------------------------------
0113            829   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:184: unsigned int ADC_at_Pin(unsigned char pin)
0113            830   ;        -----------------------------------------
0113            831   ;         function ADC_at_Pin
0113            832   ;        -----------------------------------------
0113            833   _ADC_at_Pin:
0113 8582BB     834            mov     _ADC0MX,dpl
0116            835   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:187: ADINT = 0;
0116 C2ED       836            clr     _ADINT
0118            837   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:188: ADBUSY = 1;     // Convert voltage at the pin
0118 D2EC       838            setb    _ADBUSY
011A            839   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:189: while (!ADINT); // Wait for conversion to complete
011A            840   L007001?:
011A 30ED00     841            jnb     _ADINT,L007001?
011D            842   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:190: return (ADC0);
011D 85BD82     843            mov     dpl,_ADC0
0120 85BE83     844            mov     dph,(_ADC0 >> 8)
0123 22         845            ret
0124            846   ;------------------------------------------------------------
0124            847   ;Allocation info for local variables in function 'Volts_at_Pin'
0124            848   ;------------------------------------------------------------
0124            849   ;pin                       Allocated to registers r2 
0124            850   ;------------------------------------------------------------
0124            851   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:193: float Volts_at_Pin(unsigned char pin)
0124            852   ;        -----------------------------------------
0124            853   ;         function Volts_at_Pin
0124            854   ;        -----------------------------------------
0124            855   _Volts_at_Pin:
0124            856   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:195: return ((ADC_at_Pin(pin)*VDD)/0b_0011_1111_1111_1111);
0124 120000     857            lcall   _ADC_at_Pin
0127 120000     858            lcall   ___uint2fs
012A AA82       859            mov     r2,dpl
012C AB83       860            mov     r3,dph
012E ACF0       861            mov     r4,b
0130 FD         862            mov     r5,a
0131 C002       863            push    ar2
0133 C003       864            push    ar3
0135 C004       865            push    ar4
0137 C005       866            push    ar5
0139 906C8B     867            mov     dptr,#0x6C8B
013C 75F053     868            mov     b,#0x53
013F 7440       869            mov     a,#0x40
0141 120000     870            lcall   ___fsmul
0144 AA82       871            mov     r2,dpl
0146 AB83       872            mov     r3,dph
0148 ACF0       873            mov     r4,b
014A FD         874            mov     r5,a
014B E581       875            mov     a,sp
014D 24FC       876            add     a,#0xfc
014F F581       877            mov     sp,a
0151 E4         878            clr     a
0152 C0E0       879            push    acc
0154 74FC       880            mov     a,#0xFC
0156 C0E0       881            push    acc
0158 747F       882            mov     a,#0x7F
015A C0E0       883            push    acc
015C 7446       884            mov     a,#0x46
015E C0E0       885            push    acc
0160 8A82       886            mov     dpl,r2
0162 8B83       887            mov     dph,r3
0164 8CF0       888            mov     b,r4
0166 ED         889            mov     a,r5
0167 120000     890            lcall   ___fsdiv
016A AA82       891            mov     r2,dpl
016C AB83       892            mov     r3,dph
016E ACF0       893            mov     r4,b
0170 FD         894            mov     r5,a
0171 E581       895            mov     a,sp
0173 24FC       896            add     a,#0xfc
0175 F581       897            mov     sp,a
0177 8A82       898            mov     dpl,r2
0179 8B83       899            mov     dph,r3
017B 8CF0       900            mov     b,r4
017D ED         901            mov     a,r5
017E 22         902            ret
017F            903   ;------------------------------------------------------------
017F            904   ;Allocation info for local variables in function 'Get_ADC'
017F            905   ;------------------------------------------------------------
017F            906   ;------------------------------------------------------------
017F            907   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:198: unsigned int Get_ADC (void)
017F            908   ;        -----------------------------------------
017F            909   ;         function Get_ADC
017F            910   ;        -----------------------------------------
017F            911   _Get_ADC:
017F            912   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:200: ADINT = 0;
017F C2ED       913            clr     _ADINT
0181            914   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:201: ADBUSY = 1;
0181 D2EC       915            setb    _ADBUSY
0183            916   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:202: while (!ADINT); //Wait for covnersion to complete
0183            917   L009001?:
0183 30ED40     918            jnb     _ADINT,L009001?
0186            919   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:203: return(ADC0);
0186 85BD82     920            mov     dpl,_ADC0
0189 85BE83     921            mov     dph,(_ADC0 >> 8)
018C 22         922            ret
018D            923   ;------------------------------------------------------------
018D            924   ;Allocation info for local variables in function 'TIMER0_Init'
018D            925   ;------------------------------------------------------------
018D            926   ;------------------------------------------------------------
018D            927   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:207: void TIMER0_Init(void)
018D            928   ;        -----------------------------------------
018D            929   ;         function TIMER0_Init
018D            930   ;        -----------------------------------------
018D            931   _TIMER0_Init:
018D            932   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:209: TMOD&=0b_1111_0000; // Set the bits of Timer/Counter 0 to zero
018D 5389F0     933            anl     _TMOD,#0xF0
0190            934   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:210: TMOD|=0b_0000_0001; // Timer/Counter 0 used as a 16-bit timer
0190 438901     935            orl     _TMOD,#0x01
0193            936   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:211: TR0=0; // Stop Timer/Counter 0
0193 C28C       937            clr     _TR0
0195 22         938            ret
0196            939   ;------------------------------------------------------------
0196            940   ;Allocation info for local variables in function 'main'
0196            941   ;------------------------------------------------------------
0196            942   ;vrms1                     Allocated with name '_main_vrms1_1_63'
0196            943   ;vrms2                     Allocated with name '_main_vrms2_1_63'
0196            944   ;freq                      Allocated to registers r2 r3 r4 r5 
0196            945   ;half_period_ref           Allocated with name '_main_half_period_ref_1_63'
0196            946   ;half_period_test          Allocated to registers r2 r3 r4 r5 
0196            947   ;phasediff                 Allocated with name '_main_phasediff_1_63'
0196            948   ;done                      Allocated with name '_main_done_1_63'
0196            949   ;sloc0                     Allocated with name '_main_sloc0_1_0'
0196            950   ;sloc1                     Allocated with name '_main_sloc1_1_0'
0196            951   ;------------------------------------------------------------
0196            952   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:214: void main (void)
0196            953   ;        -----------------------------------------
0196            954   ;         function main
0196            955   ;        -----------------------------------------
0196            956   _main:
0196            957   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:222: int done = 0;
0196 E4         958            clr     a
0197 F580       959            mov     _main_done_1_63,a
0199 F581       960            mov     (_main_done_1_63 + 1),a
019B            961   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:224: TIMER0_Init();
019B 120000     962            lcall   _TIMER0_Init
019E            963   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:225: waitms(500); // Give PuTTy a chance to start before sending       
019E 9001F4     964            mov     dptr,#0x01F4
01A1 120000     965            lcall   _waitms
01A4            966   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:226: printf("\x1b[2J"); // Clear screen using ANSI escape sequence.
01A4 7480       967            mov     a,#__str_0
01A6 C0E0       968            push    acc
01A8 74B7       969            mov     a,#(__str_0 >> 8)
01AA C0E0       970            push    acc
01AC 7480       971            mov     a,#0x80
01AE C0E0       972            push    acc
01B0 120000     973            lcall   _printf
01B3 1581       974            dec     sp
01B5 1581       975            dec     sp
01B7 1581       976            dec     sp
01B9            977   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:231: __FILE__, __DATE__, __TIME__);
01B9            978   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:230: "Compiled: %s, %s\n\n",
01B9 7400       979            mov     a,#__str_4
01BB C0E0       980            push    acc
01BD 74B8       981            mov     a,#(__str_4 >> 8)
01BF C0E0       982            push    acc
01C1 7480       983            mov     a,#0x80
01C3 C0E0       984            push    acc
01C5 7440       985            mov     a,#__str_3
01C7 C0E0       986            push    acc
01C9 74B8       987            mov     a,#(__str_3 >> 8)
01CB C0E0       988            push    acc
01CD 7480       989            mov     a,#0x80
01CF C0E0       990            push    acc
01D1 7480       991            mov     a,#__str_2
01D3 C0E0       992            push    acc
01D5 74B8       993            mov     a,#(__str_2 >> 8)
01D7 C0E0       994            push    acc
01D9 7480       995            mov     a,#0x80
01DB C0E0       996            push    acc
01DD 74C0       997            mov     a,#__str_1
01DF C0E0       998            push    acc
01E1 74B8       999            mov     a,#(__str_1 >> 8)
01E3 C0E0      1000            push    acc
01E5 7480      1001            mov     a,#0x80
01E7 C0E0      1002            push    acc
01E9 120000    1003            lcall   _printf
01EC E581      1004            mov     a,sp
01EE 24F4      1005            add     a,#0xf4
01F0 F581      1006            mov     sp,a
01F2           1007   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:233: InitPinADC(2, 2); // Configure P2.2 as analog input
01F2 759002    1008            mov     _InitPinADC_PARM_2,#0x02
01F5 758202    1009            mov     dpl,#0x02
01F8 120000    1010            lcall   _InitPinADC
01FB           1011   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:234: InitPinADC(2, 3); // Configure P2.3 as analog input
01FB 759003    1012            mov     _InitPinADC_PARM_2,#0x03
01FE 758202    1013            mov     dpl,#0x02
0201 120000    1014            lcall   _InitPinADC
0204           1015   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:235: InitPinADC(2, 4); // Configure P2.4 as analog input
0204 759004    1016            mov     _InitPinADC_PARM_2,#0x04
0207 758202    1017            mov     dpl,#0x02
020A 120000    1018            lcall   _InitPinADC
020D           1019   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:236: InitPinADC(2, 5); // Configure P2.5 as analog input
020D 759005    1020            mov     _InitPinADC_PARM_2,#0x05
0210 758202    1021            mov     dpl,#0x02
0213 120000    1022            lcall   _InitPinADC
0216           1023   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:237: InitADC();
0216 120000    1024            lcall   _InitADC
0219           1025   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:240: while (1)
0219           1026   L011059?:
0219           1027   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:243: TF0=0;
0219 C28D      1028            clr     _TF0
021B           1029   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:244: overflow_count=0;
021B 756000    1030            mov     _overflow_count,#0x00
021E           1031   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:247: ADC0MX=QFP32_MUX_P2_5;//ADC0MX=QFP32_MUX_P2_5;
021E 75BB12    1032            mov     _ADC0MX,#0x12
0221           1033   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:248: ADINT = 0;
0221 C2ED      1034            clr     _ADINT
0223           1035   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:249: ADBUSY=1;
0223 D2EC      1036            setb    _ADBUSY
0225           1037   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:250: while (!ADINT); // Wait for conversion to complete
0225           1038   L011001?:
0225 30ED40    1039            jnb     _ADINT,L011001?
0228           1040   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:251: TL0=0; 
0228 758A00    1041            mov     _TL0,#0x00
022B           1042   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:252: TH0=0;
022B 758C00    1043            mov     _TH0,#0x00
022E           1044   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:254: while(Get_ADC()>250); // Wait for the signal to be zero
022E           1045   L011004?:
022E 120000    1046            lcall   _Get_ADC
0231 AC82      1047            mov     r4,dpl
0233 AD83      1048            mov     r5,dph
0235 C3        1049            clr     c
0236 74FA      1050            mov     a,#0xFA
0238 9C        1051            subb    a,r4
0239 E4        1052            clr     a
023A 9D        1053            subb    a,r5
023B 4000      1054            jc      L011004?
023D           1055   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:255: while(Get_ADC()<250); // Wait for the signal to be one
023D           1056   L011007?:
023D 120000    1057            lcall   _Get_ADC
0240 AC82      1058            mov     r4,dpl
0242 AD83      1059            mov     r5,dph
0244 C3        1060            clr     c
0245 EC        1061            mov     a,r4
0246 94FA      1062            subb    a,#0xFA
0248 ED        1063            mov     a,r5
0249 9400      1064            subb    a,#0x00
024B 4000      1065            jc      L011007?
024D           1066   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:256: TR0=1; // Start the timer
024D D28C      1067            setb    _TR0
024F           1068   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:257: while(Get_ADC()>250){ // Wait for the signal to be zero
024F           1069   L011012?:
024F 120000    1070            lcall   _Get_ADC
0252 AC82      1071            mov     r4,dpl
0254 AD83      1072            mov     r5,dph
0256 C3        1073            clr     c
0257 74FA      1074            mov     a,#0xFA
0259 9C        1075            subb    a,r4
025A E4        1076            clr     a
025B 9D        1077            subb    a,r5
025C 5000      1078            jnc     L011014?
025E           1079   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:258: if(TF0==1) // Did the 16-bit timer overflow?
025E           1080   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:260: TF0=0;
025E 108D80    1081            jbc     _TF0,L011100?
0261 8000      1082            sjmp    L011012?
0263           1083   L011100?:
0263           1084   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:261: overflow_count++;
0263 0560      1085            inc     _overflow_count
0265 8000      1086            sjmp    L011012?
0267           1087   L011014?:
0267           1088   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:266: TR0=0; // Stop timer 0, the 24-bit number [overflow_count-TH0-TL0] has the period!
0267 C28C      1089            clr     _TR0
0269           1090   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:267: half_period_ref=(overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK);
0269 856082    1091            mov     dpl,_overflow_count
026C 120000    1092            lcall   ___uchar2fs
026F AC82      1093            mov     r4,dpl
0271 AD83      1094            mov     r5,dph
0273 AEF0      1095            mov     r6,b
0275 FF        1096            mov     r7,a
0276 C004      1097            push    ar4
0278 C005      1098            push    ar5
027A C006      1099            push    ar6
027C C007      1100            push    ar7
027E 900000    1101            mov     dptr,#0x0000
0281 75F080    1102            mov     b,#0x80
0284 7447      1103            mov     a,#0x47
0286 120000    1104            lcall   ___fsmul
0289 AC82      1105            mov     r4,dpl
028B AD83      1106            mov     r5,dph
028D AEF0      1107            mov     r6,b
028F FF        1108            mov     r7,a
0290 E581      1109            mov     a,sp
0292 24FC      1110            add     a,#0xfc
0294 F581      1111            mov     sp,a
0296 858C82    1112            mov     dpl,_TH0
0299 C004      1113            push    ar4
029B C005      1114            push    ar5
029D C006      1115            push    ar6
029F C007      1116            push    ar7
02A1 120000    1117            lcall   ___uchar2fs
02A4 A882      1118            mov     r0,dpl
02A6 A983      1119            mov     r1,dph
02A8 AAF0      1120            mov     r2,b
02AA FB        1121            mov     r3,a
02AB C000      1122            push    ar0
02AD C001      1123            push    ar1
02AF C002      1124            push    ar2
02B1 C003      1125            push    ar3
02B3 900000    1126            mov     dptr,#0x0000
02B6 75F080    1127            mov     b,#0x80
02B9 7443      1128            mov     a,#0x43
02BB 120000    1129            lcall   ___fsmul
02BE AA82      1130            mov     r2,dpl
02C0 AB83      1131            mov     r3,dph
02C2 A8F0      1132            mov     r0,b
02C4 F9        1133            mov     r1,a
02C5 E581      1134            mov     a,sp
02C7 24FC      1135            add     a,#0xfc
02C9 F581      1136            mov     sp,a
02CB D007      1137            pop     ar7
02CD D006      1138            pop     ar6
02CF D005      1139            pop     ar5
02D1 D004      1140            pop     ar4
02D3 C002      1141            push    ar2
02D5 C003      1142            push    ar3
02D7 C000      1143            push    ar0
02D9 C001      1144            push    ar1
02DB 8C82      1145            mov     dpl,r4
02DD 8D83      1146            mov     dph,r5
02DF 8EF0      1147            mov     b,r6
02E1 EF        1148            mov     a,r7
02E2 120000    1149            lcall   ___fsadd
02E5 AA82      1150            mov     r2,dpl
02E7 AB83      1151            mov     r3,dph
02E9 ACF0      1152            mov     r4,b
02EB FD        1153            mov     r5,a
02EC E581      1154            mov     a,sp
02EE 24FC      1155            add     a,#0xfc
02F0 F581      1156            mov     sp,a
02F2 AE8A      1157            mov     r6,_TL0
02F4 7F00      1158            mov     r7,#0x00
02F6 8E82      1159            mov     dpl,r6
02F8 8F83      1160            mov     dph,r7
02FA C002      1161            push    ar2
02FC C003      1162            push    ar3
02FE C004      1163            push    ar4
0300 C005      1164            push    ar5
0302 120000    1165            lcall   ___sint2fs
0305 AE82      1166            mov     r6,dpl
0307 AF83      1167            mov     r7,dph
0309 A8F0      1168            mov     r0,b
030B F9        1169            mov     r1,a
030C D005      1170            pop     ar5
030E D004      1171            pop     ar4
0310 D003      1172            pop     ar3
0312 D002      1173            pop     ar2
0314 C006      1174            push    ar6
0316 C007      1175            push    ar7
0318 C000      1176            push    ar0
031A C001      1177            push    ar1
031C 8A82      1178            mov     dpl,r2
031E 8B83      1179            mov     dph,r3
0320 8CF0      1180            mov     b,r4
0322 ED        1181            mov     a,r5
0323 120000    1182            lcall   ___fsadd
0326 AA82      1183            mov     r2,dpl
0328 AB83      1184            mov     r3,dph
032A ACF0      1185            mov     r4,b
032C FD        1186            mov     r5,a
032D E581      1187            mov     a,sp
032F 24FC      1188            add     a,#0xfc
0331 F581      1189            mov     sp,a
0333 C002      1190            push    ar2
0335 C003      1191            push    ar3
0337 C004      1192            push    ar4
0339 C005      1193            push    ar5
033B 90F4FC    1194            mov     dptr,#0xF4FC
033E 75F032    1195            mov     b,#0x32
0341 7434      1196            mov     a,#0x34
0343 120000    1197            lcall   ___fsmul
0346 8582F0    1198            mov     _main_half_period_ref_1_63,dpl
0349 8583F1    1199            mov     (_main_half_period_ref_1_63 + 1),dph
034C 85F0F2    1200            mov     (_main_half_period_ref_1_63 + 2),b
034F F5F3      1201            mov     (_main_half_period_ref_1_63 + 3),a
0351 E581      1202            mov     a,sp
0353 24FC      1203            add     a,#0xfc
0355 F581      1204            mov     sp,a
0357           1205   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:271: while(Get_ADC()>3000); // Wait for the signal to be zero
0357           1206   L011015?:
0357 120000    1207            lcall   _Get_ADC
035A AE82      1208            mov     r6,dpl
035C AF83      1209            mov     r7,dph
035E C3        1210            clr     c
035F 74B8      1211            mov     a,#0xB8
0361 9E        1212            subb    a,r6
0362 740B      1213            mov     a,#0x0B
0364 9F        1214            subb    a,r7
0365 4000      1215            jc      L011015?
0367           1216   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:272: while(Get_ADC()<3000); // Wait for the signal to be one
0367           1217   L011018?:
0367 120000    1218            lcall   _Get_ADC
036A AE82      1219            mov     r6,dpl
036C AF83      1220            mov     r7,dph
036E C3        1221            clr     c
036F EE        1222            mov     a,r6
0370 94B8      1223            subb    a,#0xB8
0372 EF        1224            mov     a,r7
0373 940B      1225            subb    a,#0x0B
0375 4000      1226            jc      L011018?
0377           1227   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:273: TR0=1; // Start the timer
0377 D28C      1228            setb    _TR0
0379           1229   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:274: while(Get_ADC()>3000)  // Wait for the signal to be zero
0379 E4        1230            clr     a
037A C0E0      1231            push    acc
037C C0E0      1232            push    acc
037E C0E0      1233            push    acc
0380 7440      1234            mov     a,#0x40
0382 C0E0      1235            push    acc
0384 85F082    1236            mov     dpl,_main_half_period_ref_1_63
0387 85F183    1237            mov     dph,(_main_half_period_ref_1_63 + 1)
038A 85F2F0    1238            mov     b,(_main_half_period_ref_1_63 + 2)
038D E5F3      1239            mov     a,(_main_half_period_ref_1_63 + 3)
038F 120000    1240            lcall   ___fsdiv
0392 AE82      1241            mov     r6,dpl
0394 AF83      1242            mov     r7,dph
0396 A8F0      1243            mov     r0,b
0398 F9        1244            mov     r1,a
0399 E581      1245            mov     a,sp
039B 24FC      1246            add     a,#0xfc
039D F581      1247            mov     sp,a
039F           1248   L011025?:
039F C006      1249            push    ar6
03A1 C007      1250            push    ar7
03A3 C000      1251            push    ar0
03A5 C001      1252            push    ar1
03A7 120000    1253            lcall   _Get_ADC
03AA AA82      1254            mov     r2,dpl
03AC AB83      1255            mov     r3,dph
03AE D001      1256            pop     ar1
03B0 D000      1257            pop     ar0
03B2 D007      1258            pop     ar7
03B4 D006      1259            pop     ar6
03B6 C3        1260            clr     c
03B7 74B8      1261            mov     a,#0xB8
03B9 9A        1262            subb    a,r2
03BA 740B      1263            mov     a,#0x0B
03BC 9B        1264            subb    a,r3
03BD 5000      1265            jnc     L011027?
03BF           1266   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:276: if(TF0==1) // Did the 16-bit timer overflow?
03BF           1267   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:278: TF0=0;
03BF 108D80    1268            jbc     _TF0,L011104?
03C2 8000      1269            sjmp    L011022?
03C4           1270   L011104?:
03C4           1271   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:279: overflow_count++;
03C4 0560      1272            inc     _overflow_count
03C6           1273   L011022?:
03C6           1274   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:282: if (done!=1) {
03C6 7401      1275            mov     a,#0x01
03C8 B58000    1276            cjne    a,_main_done_1_63,L011105?
03CB E4        1277            clr     a
03CC B58100    1278            cjne    a,(_main_done_1_63 + 1),L011105?
03CF 8000      1279            sjmp    L011025?
03D1           1280   L011105?:
03D1           1281   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:283: waitms(half_period_ref/2.0);
03D1 8E82      1282            mov     dpl,r6
03D3 8F83      1283            mov     dph,r7
03D5 88F0      1284            mov     b,r0
03D7 E9        1285            mov     a,r1
03D8 C006      1286            push    ar6
03DA C007      1287            push    ar7
03DC C000      1288            push    ar0
03DE C001      1289            push    ar1
03E0 120000    1290            lcall   ___fs2uint
03E3 120000    1291            lcall   _waitms
03E6           1292   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:284: vrms1 = Volts_at_Pin(QFP32_MUX_P2_5)*0.7071;
03E6 758212    1293            mov     dpl,#0x12
03E9 120000    1294            lcall   _Volts_at_Pin
03EC AA82      1295            mov     r2,dpl
03EE AB83      1296            mov     r3,dph
03F0 ACF0      1297            mov     r4,b
03F2 FD        1298            mov     r5,a
03F3 C002      1299            push    ar2
03F5 C003      1300            push    ar3
03F7 C004      1301            push    ar4
03F9 C005      1302            push    ar5
03FB 900481    1303            mov     dptr,#0x0481
03FE 75F035    1304            mov     b,#0x35
0401 743F      1305            mov     a,#0x3F
0403 120000    1306            lcall   ___fsmul
0406 8582C0    1307            mov     _main_sloc0_1_0,dpl
0409 8583C1    1308            mov     (_main_sloc0_1_0 + 1),dph
040C 85F0C2    1309            mov     (_main_sloc0_1_0 + 2),b
040F F5C3      1310            mov     (_main_sloc0_1_0 + 3),a
0411 E581      1311            mov     a,sp
0413 24FC      1312            add     a,#0xfc
0415 F581      1313            mov     sp,a
0417 D001      1314            pop     ar1
0419 D000      1315            pop     ar0
041B D007      1316            pop     ar7
041D D006      1317            pop     ar6
041F           1318   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:285: done = 1;
041F 758001    1319            mov     _main_done_1_63,#0x01
0422 E4        1320            clr     a
0423 F581      1321            mov     (_main_done_1_63 + 1),a
0425 020000    1322            ljmp    L011025?
0428           1323   L011027?:
0428           1324   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:288: TR0=0;
0428 C28C      1325            clr     _TR0
042A           1326   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:289: done = 0;
042A E4        1327            clr     a
042B F580      1328            mov     _main_done_1_63,a
042D F581      1329            mov     (_main_done_1_63 + 1),a
042F           1330   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:293: TF0=0;
042F C28D      1331            clr     _TF0
0431           1332   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:294: overflow_count=0;
0431 756000    1333            mov     _overflow_count,#0x00
0434           1334   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:296: ADC0MX=QFP32_MUX_P2_4;
0434 75BB11    1335            mov     _ADC0MX,#0x11
0437           1336   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:297: ADINT = 0;
0437 C2ED      1337            clr     _ADINT
0439           1338   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:298: ADBUSY=1;
0439 D2EC      1339            setb    _ADBUSY
043B           1340   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:299: while (!ADINT); // Wait for conversion to complete
043B           1341   L011028?:
043B 30ED80    1342            jnb     _ADINT,L011028?
043E           1343   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:300: TL0=0; 
043E 758A00    1344            mov     _TL0,#0x00
0441           1345   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:301: TH0=0;
0441 758C00    1346            mov     _TH0,#0x00
0444           1347   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:303: while(Get_ADC()>250); // Wait for the signal to be zero
0444           1348   L011031?:
0444 120000    1349            lcall   _Get_ADC
0447 AA82      1350            mov     r2,dpl
0449 AB83      1351            mov     r3,dph
044B C3        1352            clr     c
044C 74FA      1353            mov     a,#0xFA
044E 9A        1354            subb    a,r2
044F E4        1355            clr     a
0450 9B        1356            subb    a,r3
0451 4000      1357            jc      L011031?
0453           1358   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:304: while(Get_ADC()<250); // Wait for the signal to be one
0453           1359   L011034?:
0453 120000    1360            lcall   _Get_ADC
0456 AA82      1361            mov     r2,dpl
0458 AB83      1362            mov     r3,dph
045A C3        1363            clr     c
045B EA        1364            mov     a,r2
045C 94FA      1365            subb    a,#0xFA
045E EB        1366            mov     a,r3
045F 9400      1367            subb    a,#0x00
0461 4000      1368            jc      L011034?
0463           1369   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:305: TR0=1; // Start the timer
0463 D28C      1370            setb    _TR0
0465           1371   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:306: while(Get_ADC()>250){ // Wait for the signal to be zero
0465           1372   L011039?:
0465 120000    1373            lcall   _Get_ADC
0468 AA82      1374            mov     r2,dpl
046A AB83      1375            mov     r3,dph
046C C3        1376            clr     c
046D 74FA      1377            mov     a,#0xFA
046F 9A        1378            subb    a,r2
0470 E4        1379            clr     a
0471 9B        1380            subb    a,r3
0472 5000      1381            jnc     L011041?
0474           1382   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:307: if(TF0==1) // Did the 16-bit timer overflow?
0474           1383   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:309: TF0=0;
0474 108DC0    1384            jbc     _TF0,L011110?
0477 8000      1385            sjmp    L011039?
0479           1386   L011110?:
0479           1387   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:310: overflow_count++;
0479 0560      1388            inc     _overflow_count
047B 8000      1389            sjmp    L011039?
047D           1390   L011041?:
047D           1391   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:314: TR0=0; // Stop timer 0, the 24-bit number [overflow_count-TH0-TL0] has the period!
047D C28C      1392            clr     _TR0
047F           1393   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:315: half_period_test=(overflow_count*65536.0+TH0*256.0+TL0)*(12.0/SYSCLK);
047F 856082    1394            mov     dpl,_overflow_count
0482 120000    1395            lcall   ___uchar2fs
0485 AA82      1396            mov     r2,dpl
0487 AB83      1397            mov     r3,dph
0489 ACF0      1398            mov     r4,b
048B FD        1399            mov     r5,a
048C C002      1400            push    ar2
048E C003      1401            push    ar3
0490 C004      1402            push    ar4
0492 C005      1403            push    ar5
0494 900000    1404            mov     dptr,#0x0000
0497 75F080    1405            mov     b,#0x80
049A 7447      1406            mov     a,#0x47
049C 120000    1407            lcall   ___fsmul
049F AA82      1408            mov     r2,dpl
04A1 AB83      1409            mov     r3,dph
04A3 ACF0      1410            mov     r4,b
04A5 FD        1411            mov     r5,a
04A6 E581      1412            mov     a,sp
04A8 24FC      1413            add     a,#0xfc
04AA F581      1414            mov     sp,a
04AC 858C82    1415            mov     dpl,_TH0
04AF C002      1416            push    ar2
04B1 C003      1417            push    ar3
04B3 C004      1418            push    ar4
04B5 C005      1419            push    ar5
04B7 120000    1420            lcall   ___uchar2fs
04BA AE82      1421            mov     r6,dpl
04BC AF83      1422            mov     r7,dph
04BE A8F0      1423            mov     r0,b
04C0 F9        1424            mov     r1,a
04C1 C006      1425            push    ar6
04C3 C007      1426            push    ar7
04C5 C000      1427            push    ar0
04C7 C001      1428            push    ar1
04C9 900000    1429            mov     dptr,#0x0000
04CC 75F080    1430            mov     b,#0x80
04CF 7443      1431            mov     a,#0x43
04D1 120000    1432            lcall   ___fsmul
04D4 AE82      1433            mov     r6,dpl
04D6 AF83      1434            mov     r7,dph
04D8 A8F0      1435            mov     r0,b
04DA F9        1436            mov     r1,a
04DB E581      1437            mov     a,sp
04DD 24FC      1438            add     a,#0xfc
04DF F581      1439            mov     sp,a
04E1 D005      1440            pop     ar5
04E3 D004      1441            pop     ar4
04E5 D003      1442            pop     ar3
04E7 D002      1443            pop     ar2
04E9 C006      1444            push    ar6
04EB C007      1445            push    ar7
04ED C000      1446            push    ar0
04EF C001      1447            push    ar1
04F1 8A82      1448            mov     dpl,r2
04F3 8B83      1449            mov     dph,r3
04F5 8CF0      1450            mov     b,r4
04F7 ED        1451            mov     a,r5
04F8 120000    1452            lcall   ___fsadd
04FB AA82      1453            mov     r2,dpl
04FD AB83      1454            mov     r3,dph
04FF ACF0      1455            mov     r4,b
0501 FD        1456            mov     r5,a
0502 E581      1457            mov     a,sp
0504 24FC      1458            add     a,#0xfc
0506 F581      1459            mov     sp,a
0508 AE8A      1460            mov     r6,_TL0
050A 7F00      1461            mov     r7,#0x00
050C 8E82      1462            mov     dpl,r6
050E 8F83      1463            mov     dph,r7
0510 C002      1464            push    ar2
0512 C003      1465            push    ar3
0514 C004      1466            push    ar4
0516 C005      1467            push    ar5
0518 120000    1468            lcall   ___sint2fs
051B AE82      1469            mov     r6,dpl
051D AF83      1470            mov     r7,dph
051F A8F0      1471            mov     r0,b
0521 F9        1472            mov     r1,a
0522 D005      1473            pop     ar5
0524 D004      1474            pop     ar4
0526 D003      1475            pop     ar3
0528 D002      1476            pop     ar2
052A C006      1477            push    ar6
052C C007      1478            push    ar7
052E C000      1479            push    ar0
0530 C001      1480            push    ar1
0532 8A82      1481            mov     dpl,r2
0534 8B83      1482            mov     dph,r3
0536 8CF0      1483            mov     b,r4
0538 ED        1484            mov     a,r5
0539 120000    1485            lcall   ___fsadd
053C AA82      1486            mov     r2,dpl
053E AB83      1487            mov     r3,dph
0540 ACF0      1488            mov     r4,b
0542 FD        1489            mov     r5,a
0543 E581      1490            mov     a,sp
0545 24FC      1491            add     a,#0xfc
0547 F581      1492            mov     sp,a
0549 C002      1493            push    ar2
054B C003      1494            push    ar3
054D C004      1495            push    ar4
054F C005      1496            push    ar5
0551 90F4FC    1497            mov     dptr,#0xF4FC
0554 75F032    1498            mov     b,#0x32
0557 7434      1499            mov     a,#0x34
0559 120000    1500            lcall   ___fsmul
055C AA82      1501            mov     r2,dpl
055E AB83      1502            mov     r3,dph
0560 ACF0      1503            mov     r4,b
0562 FD        1504            mov     r5,a
0563 E581      1505            mov     a,sp
0565 24FC      1506            add     a,#0xfc
0567 F581      1507            mov     sp,a
0569           1508   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:318: ADINT = 0;
0569 C2ED      1509            clr     _ADINT
056B           1510   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:319: ADBUSY=1;
056B D2EC      1511            setb    _ADBUSY
056D           1512   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:320: while (!ADINT); // Wait for conversion to complete
056D           1513   L011042?:
056D 30ED00    1514            jnb     _ADINT,L011042?
0570           1515   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:321: TL0=0; 
0570 758A00    1516            mov     _TL0,#0x00
0573           1517   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:322: TH0=0;
0573 758C00    1518            mov     _TH0,#0x00
0576           1519   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:323: while(Get_ADC()>3000); // Wait for the signal to be zero
0576           1520   L011045?:
0576 C002      1521            push    ar2
0578 C003      1522            push    ar3
057A C004      1523            push    ar4
057C C005      1524            push    ar5
057E 120000    1525            lcall   _Get_ADC
0581 AE82      1526            mov     r6,dpl
0583 AF83      1527            mov     r7,dph
0585 D005      1528            pop     ar5
0587 D004      1529            pop     ar4
0589 D003      1530            pop     ar3
058B D002      1531            pop     ar2
058D C3        1532            clr     c
058E 74B8      1533            mov     a,#0xB8
0590 9E        1534            subb    a,r6
0591 740B      1535            mov     a,#0x0B
0593 9F        1536            subb    a,r7
0594 4000      1537            jc      L011045?
0596           1538   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:324: while(Get_ADC()<3000); // Wait for the signal to be one
0596           1539   L011048?:
0596 C002      1540            push    ar2
0598 C003      1541            push    ar3
059A C004      1542            push    ar4
059C C005      1543            push    ar5
059E 120000    1544            lcall   _Get_ADC
05A1 AE82      1545            mov     r6,dpl
05A3 AF83      1546            mov     r7,dph
05A5 D005      1547            pop     ar5
05A7 D004      1548            pop     ar4
05A9 D003      1549            pop     ar3
05AB D002      1550            pop     ar2
05AD C3        1551            clr     c
05AE EE        1552            mov     a,r6
05AF 94B8      1553            subb    a,#0xB8
05B1 EF        1554            mov     a,r7
05B2 940B      1555            subb    a,#0x0B
05B4 4000      1556            jc      L011048?
05B6           1557   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:325: TR0=1; // Start the timer
05B6 D28C      1558            setb    _TR0
05B8           1559   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:326: while(Get_ADC()>3000)  // Wait for the signal to be zero
05B8 E4        1560            clr     a
05B9 C0E0      1561            push    acc
05BB C0E0      1562            push    acc
05BD C0E0      1563            push    acc
05BF 7440      1564            mov     a,#0x40
05C1 C0E0      1565            push    acc
05C3 8A82      1566            mov     dpl,r2
05C5 8B83      1567            mov     dph,r3
05C7 8CF0      1568            mov     b,r4
05C9 ED        1569            mov     a,r5
05CA 120000    1570            lcall   ___fsdiv
05CD AA82      1571            mov     r2,dpl
05CF AB83      1572            mov     r3,dph
05D1 ACF0      1573            mov     r4,b
05D3 FD        1574            mov     r5,a
05D4 E581      1575            mov     a,sp
05D6 24FC      1576            add     a,#0xfc
05D8 F581      1577            mov     sp,a
05DA           1578   L011055?:
05DA C002      1579            push    ar2
05DC C003      1580            push    ar3
05DE C004      1581            push    ar4
05E0 C005      1582            push    ar5
05E2 120000    1583            lcall   _Get_ADC
05E5 AE82      1584            mov     r6,dpl
05E7 AF83      1585            mov     r7,dph
05E9 D005      1586            pop     ar5
05EB D004      1587            pop     ar4
05ED D003      1588            pop     ar3
05EF D002      1589            pop     ar2
05F1 C3        1590            clr     c
05F2 74B8      1591            mov     a,#0xB8
05F4 9E        1592            subb    a,r6
05F5 740B      1593            mov     a,#0x0B
05F7 9F        1594            subb    a,r7
05F8 5000      1595            jnc     L011057?
05FA           1596   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:328: if(TF0==1) // Did the 16-bit timer overflow?
05FA           1597   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:330: TF0=0;
05FA 108D40    1598            jbc     _TF0,L011115?
05FD 8000      1599            sjmp    L011052?
05FF           1600   L011115?:
05FF           1601   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:331: overflow_count++;
05FF 0560      1602            inc     _overflow_count
0601           1603   L011052?:
0601           1604   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:334: if (done!=1) {
0601 7401      1605            mov     a,#0x01
0603 B580C0    1606            cjne    a,_main_done_1_63,L011116?
0606 E4        1607            clr     a
0607 B581C0    1608            cjne    a,(_main_done_1_63 + 1),L011116?
060A 8000      1609            sjmp    L011055?
060C           1610   L011116?:
060C           1611   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:335: waitms(half_period_test/2.0);
060C 8A82      1612            mov     dpl,r2
060E 8B83      1613            mov     dph,r3
0610 8CF0      1614            mov     b,r4
0612 ED        1615            mov     a,r5
0613 C002      1616            push    ar2
0615 C003      1617            push    ar3
0617 C004      1618            push    ar4
0619 C005      1619            push    ar5
061B 120000    1620            lcall   ___fs2uint
061E 120000    1621            lcall   _waitms
0621           1622   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:336: vrms2 = Volts_at_Pin(QFP32_MUX_P2_4)*0.7071;
0621 758211    1623            mov     dpl,#0x11
0624 120000    1624            lcall   _Volts_at_Pin
0627 AE82      1625            mov     r6,dpl
0629 AF83      1626            mov     r7,dph
062B A8F0      1627            mov     r0,b
062D F9        1628            mov     r1,a
062E C006      1629            push    ar6
0630 C007      1630            push    ar7
0632 C000      1631            push    ar0
0634 C001      1632            push    ar1
0636 900481    1633            mov     dptr,#0x0481
0639 75F035    1634            mov     b,#0x35
063C 743F      1635            mov     a,#0x3F
063E 120000    1636            lcall   ___fsmul
0641 858200    1637            mov     _main_sloc1_1_0,dpl
0644 858301    1638            mov     (_main_sloc1_1_0 + 1),dph
0647 85F002    1639            mov     (_main_sloc1_1_0 + 2),b
064A F503      1640            mov     (_main_sloc1_1_0 + 3),a
064C E581      1641            mov     a,sp
064E 24FC      1642            add     a,#0xfc
0650 F581      1643            mov     sp,a
0652 D005      1644            pop     ar5
0654 D004      1645            pop     ar4
0656 D003      1646            pop     ar3
0658 D002      1647            pop     ar2
065A           1648   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:337: done = 1;
065A 758001    1649            mov     _main_done_1_63,#0x01
065D E4        1650            clr     a
065E F581      1651            mov     (_main_done_1_63 + 1),a
0660 020000    1652            ljmp    L011055?
0663           1653   L011057?:
0663           1654   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:340: TR0=0;
0663 C28C      1655            clr     _TR0
0665           1656   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:341: done = 0;
0665 E4        1657            clr     a
0666 F580      1658            mov     _main_done_1_63,a
0668 F581      1659            mov     (_main_done_1_63 + 1),a
066A           1660   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:346: freq = 1.0/((2.0)*(half_period_ref));
066A C0F0      1661            push    _main_half_period_ref_1_63
066C C0F1      1662            push    (_main_half_period_ref_1_63 + 1)
066E C0F2      1663            push    (_main_half_period_ref_1_63 + 2)
0670 C0F3      1664            push    (_main_half_period_ref_1_63 + 3)
0672 900000    1665            mov     dptr,#(0x00&0x00ff)
0675 E4        1666            clr     a
0676 F5F0      1667            mov     b,a
0678 7440      1668            mov     a,#0x40
067A 120000    1669            lcall   ___fsmul
067D AA82      1670            mov     r2,dpl
067F AB83      1671            mov     r3,dph
0681 ACF0      1672            mov     r4,b
0683 FD        1673            mov     r5,a
0684 E581      1674            mov     a,sp
0686 24FC      1675            add     a,#0xfc
0688 F581      1676            mov     sp,a
068A C002      1677            push    ar2
068C C003      1678            push    ar3
068E C004      1679            push    ar4
0690 C005      1680            push    ar5
0692 900000    1681            mov     dptr,#0x0000
0695 75F080    1682            mov     b,#0x80
0698 743F      1683            mov     a,#0x3F
069A 120000    1684            lcall   ___fsdiv
069D AA82      1685            mov     r2,dpl
069F AB83      1686            mov     r3,dph
06A1 ACF0      1687            mov     r4,b
06A3 FD        1688            mov     r5,a
06A4 E581      1689            mov     a,sp
06A6 24FC      1690            add     a,#0xfc
06A8 F581      1691            mov     sp,a
06AA           1692   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:348: printf("freq = %f, vrms1 = %f,vrms2 = %f,phasediff = %f\r", freq, vrms1, vrms2,phasediff);
06AA C040      1693            push    _main_phasediff_1_63
06AC C041      1694            push    (_main_phasediff_1_63 + 1)
06AE C042      1695            push    (_main_phasediff_1_63 + 2)
06B0 C043      1696            push    (_main_phasediff_1_63 + 3)
06B2 C000      1697            push    _main_sloc1_1_0
06B4 C001      1698            push    (_main_sloc1_1_0 + 1)
06B6 C002      1699            push    (_main_sloc1_1_0 + 2)
06B8 C003      1700            push    (_main_sloc1_1_0 + 3)
06BA C0C0      1701            push    _main_sloc0_1_0
06BC C0C1      1702            push    (_main_sloc0_1_0 + 1)
06BE C0C2      1703            push    (_main_sloc0_1_0 + 2)
06C0 C0C3      1704            push    (_main_sloc0_1_0 + 3)
06C2 C002      1705            push    ar2
06C4 C003      1706            push    ar3
06C6 C004      1707            push    ar4
06C8 C005      1708            push    ar5
06CA 7400      1709            mov     a,#__str_5
06CC C0E0      1710            push    acc
06CE 74C1      1711            mov     a,#(__str_5 >> 8)
06D0 C0E0      1712            push    acc
06D2 7480      1713            mov     a,#0x80
06D4 C0E0      1714            push    acc
06D6 120000    1715            lcall   _printf
06D9 E581      1716            mov     a,sp
06DB 24ED      1717            add     a,#0xed
06DD F581      1718            mov     sp,a
06DF           1719   ;        C:\Users\jerry\OneDrive\Documents\ELEC 291 Labs\Lab 5\EFM8_ADC.c:349: waitms(500);
06DF 9001F4    1720            mov     dptr,#0x01F4
06E2 120000    1721            lcall   _waitms
06E5 020000    1722            ljmp    L011059?
06E8           1723            rseg R_CSEG
06E8           1724   
0000           1725            rseg R_XINIT
0000           1726   
0000           1727            rseg R_CONST
0000           1728   __str_0:
0000 1B        1729            db 0x1B
0001 5B324A    1730            db '[2J'
0004 00        1731            db 0x00
0005           1732   __str_1:
0005 41444320  1733            db 'ADC test program'
     74657374
     2070726F
     6772616D
0015 0A        1734            db 0x0A
0016 46696C65  1735            db 'File: %s'
     3A202573
001E 0A        1736            db 0x0A
001F 436F6D70  1737            db 'Compiled: %s, %s'
     696C6564
     3A202573
     2C202573
002F 0A        1738            db 0x0A
0030 0A        1739            db 0x0A
0031 00        1740            db 0x00
0032           1741   __str_2:
0032 433A      1742            db 'C:'
0034 5C        1743            db 0x5C
0035 55736572  1744            db 'Users'
     73
003A 5C        1745            db 0x5C
003B 6A657272  1746            db 'jerry'
     79
0040 5C        1747            db 0x5C
0041 4F6E6544  1748            db 'OneDrive'
     72697665
0049 5C        1749            db 0x5C
004A 446F6375  1750            db 'Documents'
     6D656E74
     73
0053 5C        1751            db 0x5C
0054 454C4543  1752            db 'ELEC 291 Labs'
     20323931
     204C6162
     73
0061 5C        1753            db 0x5C
0062 4C616220  1754            db 'Lab 5'
     35
0067 5C        1755            db 0x5C
0068 45464D38  1756            db 'EFM8_A'
     5F41
006E 44432E63  1757            db 'DC.c'
0072 00        1758            db 0x00
0073           1759   __str_3:
0073 4D617220  1760            db 'Mar  8 2023'
     20382032
     303233
007E 00        1761            db 0x00
007F           1762   __str_4:
007F 31353A30  1763            db '15:09:52'
     393A3532
0087 00        1764            db 0x00
0088           1765   __str_5:
0088 66726571  1766            db 'freq = %f, vrms1 = %f,vrms2 = %f,phasediff = %f'
     203D2025
     662C2076
     726D7331
     203D2025
     662C7672
     6D733220
     3D202566
     2C706861
     73656469
     6666203D
     202566
00B7 0D        1767            db 0x0D
00B8 00        1768            db 0x00
00B9           1769   
0003           1770            CSEG
0003           1771   
0003           1772   end
